Much of what we've discussed so far has been primarily based on Bitcoin because it was the first well-known blockchain and a great introduction to the topic because of its foundational character in the industry. Now, we'd like to introduce you to what you could consider a next-generation blockchain, Ethereum. Bitcoin was originally created as a peer-to-peer electronic cash system, and that's the role it has. Currency is traded back and forth between addresses. Ethereum wasn't visualized this way. It was created with the idea not of being a peer-to-peer money system but a peer-to-peer database and distributed virtual computer, a computer that manipulates something called state. State is a part of other blockchains but of particular concern to Ethereum. You can think of state as the current values of all the variables in the system as agreed upon by all the nodes through a consensus. The state in Ethereum changes as the result of transactions and the operation of a very special feature of Ethereum, the Ethereum Virtual Machine. While Bitcoin does have a somewhat simplified scripting language, one of the most noteworthy features of Ethereum when it was created was its much more robust EVM. What differentiated the EVM was that it was Turing complete, which means it's complex enough that it can theoretically do anything any other computer can do. All of the code that it runs can be stored as a part of the blockchain. You can program fairly sophisticated apps whose core logic runs on the blockchain. Because of this, there is a large developer community growing around Ethereum, building app and developing the Ethereum ecosystem. The system does have challenges around scaling. For example, the entire system can currently only process about 15 transactions per second. The entire network has to run every computation on every computer, which means that the whole system can really only work as fast as the slowest computers on it. Proof of work is inefficient and the blockchain itself keeps growing in size. The community is addressing these scaling concerns and centering on three approaches: proof-of-stake, state channels, and charting. The transition to proof-of-stake from proof-of-work will reduce a lot of the computational burden on the network. Rather than mining blocks by finding a valid low hash value, the network would forge blocks by distributing the permission to create them by the proportion of currency staked by a node rather than the amount of computational power it might have. State channels referred to a sort of clustering of transactions in one place off chain, and then opening the channel, and moving them on chain as a group. This would reduce the number of individual transactions that network would have to process independently and instead provides them in bulk. Finally, sharding. Sharding is the idea of partitioning the network up into smaller parts or shards which allow each to work independently for collation later. There are a lot of technical hurdles to sharding, but it presents great promise for scalability in the future. As of today, the community is looking at addressing scaling with a new initiative called shasper, which is a combination of proof-of-stake and sharding. Now that you've been introduced to Ethereum, let's look at what really makes Ethereum interesting, smart contracts and the EVM
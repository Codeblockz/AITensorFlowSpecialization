Decentralized apps are one of the big features that made Ethereum, so interesting to developers. The idea that you could have distributed files, came way back in 2001. But the idea that instead of static files, you could have programmable, executable logic, enforced with the security of a distributed blockchain, was entirely new in 2015. Decentralized apps or Dapps, are the next logical step after smart contracts. Where a smart contract is a small piece of logic that is stored and executed by the machines on a blockchain, Dapps refer to higher level applications, built using those smart contracts to provide their functionality. Dapps like other applications, are a combination of a variety of technologies. A technology "stack" like you might have with a standard web application. A standard application might look like this. You have web hosting that stores and applications files, server software that runs program logic, a database that stores information, and a connection to a user, who uses a browser to interact with the web apps front-end. The only difference with Dapp, and it is a pretty big difference, is that the database files and much of the program logic itself, are not stored or run on any one computer or server. They are stored and run across the blockchain network. The blockchain protocol governs the simultaneous execution of program code, so that all the same security behind transaction data on the blockchain, is applied to the program code itself. It's a totally different way to conceive of how apps can be built and run. Distributed decentralized apps are extremely robust against attack, and have high fault tolerance. Their embeddedness in a blockchain, gives them ready made access to the tools and value structures of the blockchain, such as Tokenized Ownership and Identity Management, which make user verification and payment processing, particularly easy. There is the possibility of creating apps where your user data is your own, and it's not accessible or sellable by centralized service operators or third parties. There is the opportunity for increased trust, given the public nature of smart contracts. So, users can actually analyze back-end code, and see what smart contracts are up to. Now there are drawbacks of course, executing contract code is expensive. Anything run on the Ethereum network, has to be run on each and every node. This means that contracts and logic must be simple, streamlined and efficient, and as such it is only useful for a small subset of applications. Smart contracts are also immutable. A benefit sometimes, but if you find a bug it's much more difficult to correct. And there are obvious scaling issues here. If all computers have to run everything, your entire network will only move at the speed of the slowest computer. Sharding which we talked about in a previous lesson, should help with some of these scaling issues. You can think of Dapps, as being built upon networks of smart contracts, which use transactions to interact with each other. These contracts send data to one another, in the same way that a Bitcoin transaction might send value.